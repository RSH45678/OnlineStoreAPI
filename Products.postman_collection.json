{
	"info": {
		"_postman_id": "8e3bfdcd-47e2-44a3-9718-0020ba227b83",
		"name": "Products",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "46699007",
		"_collection_link": "https://anuradha-9737728.postman.co/workspace/MiniProject_OnlineStoreAPI~5e7ae1dd-064a-4bf4-a2bc-b6b09ba16637/collection/46699007-8e3bfdcd-47e2-44a3-9718-0020ba227b83?action=share&source=collection_link&creator=46699007"
	},
	"item": [
		{
			"name": "Get Single Product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonResponse= pm.response.json();\r",
							"\r",
							"\r",
							"//validating successful response code\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"     pm.response.to.have.status(200);\r",
							" });\r",
							"\r",
							"//validating json schema\r",
							"const schema=\r",
							"{\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"title\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"price\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"description\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"category\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"image\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"rating\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"rate\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"count\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"rate\",\r",
							"        \"count\"\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"title\",\r",
							"    \"price\",\r",
							"    \"description\",\r",
							"    \"category\",\r",
							"    \"image\",\r",
							"    \"rating\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('Json Schema Validation', function() { \r",
							"     pm.response.to.have.jsonSchema(schema);\r",
							"     });\r",
							"\r",
							" //Checking response is an object and not empty\r",
							" pm.test(\"Response is an object\", function(){\r",
							"pm.expect(jsonResponse).to.be.a('object').and.not.be.empty;\r",
							" });\r",
							"\r",
							"\r",
							"//validating returned product matches the provided product ID.\r",
							"pm.test(\"Returned Product matches the provided product id\",function(){\r",
							"    pm.expect(jsonResponse.id).to.be.eql(parseInt(pm.collectionVariables.get(\"id\")));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//collection variable\r",
							"pm.collectionVariables.set(\"id\",\"2\");\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}products/{{id}}",
					"host": [
						"{{base_url}}products"
					],
					"path": [
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonResponse= pm.response.json();\r",
							"\r",
							"//validating successful response code\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"     pm.response.to.have.status(200);\r",
							" });\r",
							"\r",
							"//validating json schema\r",
							"const schema =\r",
							"{\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"      \"id\": {\r",
							"        \"type\": \"number\"\r",
							"      },\r",
							"      \"title\": {\r",
							"        \"type\": \"string\"\r",
							"      },\r",
							"      \"price\": {\r",
							"        \"type\": \"number\"\r",
							"      },\r",
							"      \"description\": {\r",
							"        \"type\": \"string\"\r",
							"      },\r",
							"      \"category\": {\r",
							"        \"type\": \"string\"\r",
							"      },\r",
							"      \"image\": {\r",
							"        \"type\": \"string\"\r",
							"      },\r",
							"      \"rating\": {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"          \"rate\": {\r",
							"            \"type\": \"number\"\r",
							"          },\r",
							"          \"count\": {\r",
							"            \"type\": \"number\"\r",
							"          }\r",
							"        },\r",
							"        \"required\": [\r",
							"          \"rate\",\r",
							"          \"count\"\r",
							"        ]\r",
							"      }\r",
							"    },\r",
							"    \"required\": [\r",
							"      \"id\",\r",
							"      \"title\",\r",
							"      \"price\",\r",
							"      \"description\",\r",
							"      \"category\",\r",
							"      \"image\",\r",
							"      \"rating\"\r",
							"    ]\r",
							"  }\r",
							"}\r",
							"\r",
							" pm.test('Json schema validation', function() { \r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"     });\r",
							"\r",
							" //Checking response is an array\r",
							" pm.test(\"Response is an array\", function(){\r",
							"pm.expect(jsonResponse).to.be.a('array').and.not.be.empty;\r",
							" });\r",
							"\r",
							" //Validating response is not empty array\r",
							" pm.test(\"Response array is not empty\", function(){\r",
							"    pm.expect(jsonResponse.length).to.not.equal(0);\r",
							" });\r",
							"\r",
							" //Check array length is exactly 20\r",
							" pm.test(\"checking array length is 20\",function(){\r",
							"    pm.expect(jsonResponse.length).to.equal(20);\r",
							" });\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}products",
					"host": [
						"{{base_url}}products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Limited Products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonResponse= pm.response.json();\r",
							"\r",
							"//validating successful response code\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"     pm.response.to.have.status(200);\r",
							" });\r",
							"\r",
							"//validating json schema\r",
							"const schema=\r",
							"{\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"      \"id\": {\r",
							"        \"type\": \"number\"\r",
							"      },\r",
							"      \"title\": {\r",
							"        \"type\": \"string\"\r",
							"      },\r",
							"      \"price\": {\r",
							"        \"type\": \"number\"\r",
							"      },\r",
							"      \"description\": {\r",
							"        \"type\": \"string\"\r",
							"      },\r",
							"      \"category\": {\r",
							"        \"type\": \"string\"\r",
							"      },\r",
							"      \"image\": {\r",
							"        \"type\": \"string\"\r",
							"      },\r",
							"      \"rating\": {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"          \"rate\": {\r",
							"            \"type\": \"number\"\r",
							"          },\r",
							"          \"count\": {\r",
							"            \"type\": \"number\"\r",
							"          }\r",
							"        },\r",
							"        \"required\": [\r",
							"          \"rate\",\r",
							"          \"count\"\r",
							"        ]\r",
							"      }\r",
							"    },\r",
							"    \"required\": [\r",
							"      \"id\",\r",
							"      \"title\",\r",
							"      \"price\",\r",
							"      \"description\",\r",
							"      \"category\",\r",
							"      \"image\",\r",
							"      \"rating\"\r",
							"    ]\r",
							"  }\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', function() { pm.expect(tv4.validate(jsonResponse, schema)).to.be.true; });\r",
							"\r",
							"//Checking response is an array\r",
							" pm.test(\"Response is an array\", function(){\r",
							"pm.expect(Array.isArray(jsonResponse)).to.be.true;\r",
							" });\r",
							"\r",
							" //Validating response is not empty array\r",
							" pm.test(\"Response array is not empty\", function(){\r",
							"    pm.expect(jsonResponse.length).to.not.equal(0);\r",
							" });\r",
							"\r",
							" //Validating number of products returned matches the limit\r",
							" pm.test(\"Products limit validation\", function(){\r",
							"    pm.expect(jsonResponse.length).to.be.eql(parseInt(pm.collectionVariables.get(\"limit\")))\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//collection variable\r",
							"pm.collectionVariables.set(\"limit\",\"3\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}products?limit={{limit}}",
					"host": [
						"{{base_url}}products"
					],
					"query": [
						{
							"key": "limit",
							"value": "{{limit}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Sorted Products",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//collection variable\r",
							"pm.collectionVariables.set(\"sort\",\"desc\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonResponse= pm.response.json();\r",
							"\r",
							"//validating successful response code\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"     pm.response.to.have.status(200);\r",
							" });\r",
							"\r",
							"//validating json schema\r",
							"const schema=\r",
							"{\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"      \"id\": {\r",
							"        \"type\": \"number\"\r",
							"      },\r",
							"      \"title\": {\r",
							"        \"type\": \"string\"\r",
							"      },\r",
							"      \"price\": {\r",
							"        \"type\": \"number\"\r",
							"      },\r",
							"      \"description\": {\r",
							"        \"type\": \"string\"\r",
							"      },\r",
							"      \"category\": {\r",
							"        \"type\": \"string\"\r",
							"      },\r",
							"      \"image\": {\r",
							"        \"type\": \"string\"\r",
							"      },\r",
							"      \"rating\": {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"          \"rate\": {\r",
							"            \"type\": \"number\"\r",
							"          },\r",
							"          \"count\": {\r",
							"            \"type\": \"number\"\r",
							"          }\r",
							"        },\r",
							"        \"required\": [\r",
							"          \"rate\",\r",
							"          \"count\"\r",
							"        ]\r",
							"      }\r",
							"    },\r",
							"    \"required\": [\r",
							"      \"id\",\r",
							"      \"title\",\r",
							"      \"price\",\r",
							"      \"description\",\r",
							"      \"category\",\r",
							"      \"image\",\r",
							"      \"rating\"\r",
							"    ]\r",
							"  }\r",
							"}\r",
							"\r",
							"pm.test('Json schema validation', function() { pm.expect(tv4.validate(jsonResponse, schema)).to.be.true; });\r",
							"\r",
							"//Checking response is an array\r",
							" pm.test(\"Response is an array\", function(){\r",
							"pm.expect(Array.isArray(jsonResponse)).to.be.true;\r",
							" });\r",
							"\r",
							" //Validating response is not empty array\r",
							" pm.test(\"Response array is not empty\", function(){\r",
							"    pm.expect(jsonResponse.length).to.not.equal(0);\r",
							" });\r",
							"\r",
							"// This test will check the order if desc is provided then first item should be of id 20 and if asc is provided then id should be 1\r",
							"pm.test(\"validate returned items are in sorted order\", function(){\r",
							"    sorting_order = pm.collectionVariables.get(\"sort\");\r",
							"    if(sorting_order == 'desc'){\r",
							"        pm.expect(jsonResponse[0].id).to.be.eql(20)\r",
							"    }else{\r",
							"        pm.expect(jsonResponse[0].id).to.be.eql(1)\r",
							"    };\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}products?sort={{sort}}",
					"host": [
						"{{base_url}}products"
					],
					"query": [
						{
							"key": "sort",
							"value": "{{sort}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Products with Limit&Sort",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonResponse= pm.response.json();\r",
							"\r",
							"//Validating json schema\r",
							"const schema=\r",
							"{\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"title\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"price\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"description\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"category\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"image\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"rating\": {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"rate\": {\r",
							"              \"type\": \"number\"\r",
							"            },\r",
							"            \"count\": {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"rate\",\r",
							"            \"count\"\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"title\",\r",
							"        \"price\",\r",
							"        \"description\",\r",
							"        \"category\",\r",
							"        \"image\",\r",
							"        \"rating\"\r",
							"      ]\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"title\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"price\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"description\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"category\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"image\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"rating\": {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"rate\": {\r",
							"              \"type\": \"number\"\r",
							"            },\r",
							"            \"count\": {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"rate\",\r",
							"            \"count\"\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"title\",\r",
							"        \"price\",\r",
							"        \"description\",\r",
							"        \"category\",\r",
							"        \"image\",\r",
							"        \"rating\"\r",
							"      ]\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"title\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"price\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"description\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"category\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"image\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"rating\": {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"rate\": {\r",
							"              \"type\": \"number\"\r",
							"            },\r",
							"            \"count\": {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"rate\",\r",
							"            \"count\"\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"title\",\r",
							"        \"price\",\r",
							"        \"description\",\r",
							"        \"category\",\r",
							"        \"image\",\r",
							"        \"rating\"\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('Json schema validation',function(){\r",
							"    pm.expect(jsonResponse).to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"//Checking response is an array\r",
							" pm.test(\"Response is an array\", function(){\r",
							"pm.expect(Array.isArray(jsonResponse)).to.be.true;\r",
							" });\r",
							"\r",
							" //Validating response is not empty array\r",
							" pm.test(\"Response array is not empty\", function(){\r",
							"    pm.expect(jsonResponse.length).to.not.equal(0);\r",
							" });\r",
							"\r",
							"pm.test(\"validate returned items are in sorted order\", function(){\r",
							"    sorting_order = pm.collectionVariables.get(\"sort\");\r",
							"    if(sorting_order == 'asc'){\r",
							"        pm.expect(jsonResponse[0].id).to.be.eql(1)\r",
							"    }else{\r",
							"        pm.expect(jsonResponse[0].id).to.be.eql(parseInt(pm.collectionVariables.get(\"limit\")))\r",
							"    };\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}products?limit={{limit}}&sort={{sort}}",
					"host": [
						"{{base_url}}products"
					],
					"query": [
						{
							"key": "limit",
							"value": "{{limit}}"
						},
						{
							"key": "sort",
							"value": "{{sort}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Categories",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonResponse= pm.response.json();\r",
							"\r",
							"//validating successful response code\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"     pm.response.to.have.status(200);\r",
							" });\r",
							"\r",
							" //Validating json schema\r",
							" const schema=\r",
							" {\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('Json schema validation',function(){\r",
							"    pm.expect(jsonResponse).to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"//Validating response is not empty array\r",
							" pm.test(\"Response array is not empty\", function(){\r",
							"    pm.expect(jsonResponse.length).to.not.equal(0);\r",
							" });\r",
							"\r",
							"//Array length validation\r",
							"pm.test(\"Array length validation\",function(){\r",
							"    pm.expect(jsonResponse.length).to.be.eql(4);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}products/categories",
					"host": [
						"{{base_url}}products"
					],
					"path": [
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Product by Category",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//Collection variable\r",
							"pm.collectionVariables.set(\"category\",\"women's clothing\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonResponse= pm.response.json();\r",
							"\r",
							"//validating successful response code\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"     pm.response.to.have.status(200);\r",
							" });\r",
							"\r",
							" //Validating json schema\r",
							" const schema= \r",
							" {\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"title\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"price\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"description\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"category\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"image\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"rating\": {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"rate\": {\r",
							"              \"type\": \"number\"\r",
							"            },\r",
							"            \"count\": {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"rate\",\r",
							"            \"count\"\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"title\",\r",
							"        \"price\",\r",
							"        \"description\",\r",
							"        \"category\",\r",
							"        \"image\",\r",
							"        \"rating\"\r",
							"      ]\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"title\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"price\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"description\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"category\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"image\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"rating\": {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"rate\": {\r",
							"              \"type\": \"number\"\r",
							"            },\r",
							"            \"count\": {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"rate\",\r",
							"            \"count\"\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"title\",\r",
							"        \"price\",\r",
							"        \"description\",\r",
							"        \"category\",\r",
							"        \"image\",\r",
							"        \"rating\"\r",
							"      ]\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"title\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"price\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"description\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"category\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"image\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"rating\": {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"rate\": {\r",
							"              \"type\": \"number\"\r",
							"            },\r",
							"            \"count\": {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"rate\",\r",
							"            \"count\"\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"title\",\r",
							"        \"price\",\r",
							"        \"description\",\r",
							"        \"category\",\r",
							"        \"image\",\r",
							"        \"rating\"\r",
							"      ]\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"title\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"price\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"description\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"category\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"image\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"rating\": {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"rate\": {\r",
							"              \"type\": \"number\"\r",
							"            },\r",
							"            \"count\": {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"rate\",\r",
							"            \"count\"\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"title\",\r",
							"        \"price\",\r",
							"        \"description\",\r",
							"        \"category\",\r",
							"        \"image\",\r",
							"        \"rating\"\r",
							"      ]\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"title\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"price\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"description\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"category\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"image\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"rating\": {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"rate\": {\r",
							"              \"type\": \"number\"\r",
							"            },\r",
							"            \"count\": {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"rate\",\r",
							"            \"count\"\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"title\",\r",
							"        \"price\",\r",
							"        \"description\",\r",
							"        \"category\",\r",
							"        \"image\",\r",
							"        \"rating\"\r",
							"      ]\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"title\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"price\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"description\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"category\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"image\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"rating\": {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"rate\": {\r",
							"              \"type\": \"number\"\r",
							"            },\r",
							"            \"count\": {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"rate\",\r",
							"            \"count\"\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"title\",\r",
							"        \"price\",\r",
							"        \"description\",\r",
							"        \"category\",\r",
							"        \"image\",\r",
							"        \"rating\"\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Json schema validation\",function(){\r",
							"   pm.expect(jsonResponse).to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"//Validating response is not empty array\r",
							" pm.test(\"Response array is not empty\", function(){\r",
							"    pm.expect(jsonResponse.length).to.not.equal(0);\r",
							" });\r",
							"\r",
							"//Validating product belong to the specific category\r",
							" pm.test(\"only products of the given category is returned\", function(){\r",
							"    let category =  pm.collectionVariables.get(\"category\")\r",
							"    jsonResponse.forEach(function(item) {\r",
							"        pm.expect(item.category).to.be.eql(category);\r",
							"    }); \r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}products/category/{{category}}",
					"host": [
						"{{base_url}}products"
					],
					"path": [
						"category",
						"{{category}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add product",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//Collection variables\r",
							"pm.collectionVariables.set(\"title\",\"Jessica Howard Surplice Bodice Dress\" );\r",
							"pm.collectionVariables.set(\"price\",\"230.78\");\r",
							"pm.collectionVariables.set(\"description\",\"This is a black dress with satin cloth fabric, having three fourth sleeves.\");\r",
							"pm.collectionVariables.set(\"image\",\"https://tse4.mm.bing.net/th/id/OIP.Hcgy0R6ga-9vySRx3J1-4QHaIl?pid=Api&P=0&h=180\");\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonResponse= pm.response.json();\r",
							"\r",
							"//validating successful response code\r",
							"pm.test(\"Status code is 201\", () => {\r",
							"     pm.response.to.have.status(201);\r",
							" });\r",
							"\r",
							" //Validating json schema\r",
							" const schema=\r",
							" {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"title\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"price\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"description\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"image\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"category\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"title\",\r",
							"    \"price\",\r",
							"    \"description\",\r",
							"    \"image\",\r",
							"    \"category\"\r",
							"  ]\r",
							"}\r",
							"pm.test(\"Json schema validation\",function(){\r",
							"pm.expect(jsonResponse).to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"pm.test(\"Response validation\", function(){\r",
							"    pm.expect(jsonResponse).to.have.property(\"id\");\r",
							"    pm.expect(jsonResponse.id).to.be.a('number')\r",
							"});\r",
							"\r",
							"//Checking response is non empty object\r",
							" pm.test(\"Response is an object and not empty\", function(){\r",
							"pm.expect(jsonResponse).to.be.a('object').and.not.be.empty;\r",
							" });\r",
							"\r",
							"//Returned product matches input data\r",
							"pm.test(\"Expected products validation\", function(){\r",
							"    pm.expect(jsonResponse.id).to.be.eql(21);\r",
							"    pm.expect(jsonResponse.title).to.be.eql(pm.collectionVariables.get(\"title\"));\r",
							"    pm.expect(jsonResponse.description).to.be.eql(pm.collectionVariables.get(\"description\"));\r",
							"    pm.expect(jsonResponse.price).to.be.eql(parseFloat(pm.collectionVariables.get(\"price\")));\r",
							"    pm.expect(jsonResponse.image).to.be.eql(pm.collectionVariables.get(\"image\"));\r",
							"    pm.expect(jsonResponse.category).to.be.eql(pm.collectionVariables.get(\"category\"));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"{{title}}\",\r\n    \"price\": {{price}},\r\n    \"description\": \"{{description}}\",\r\n    \"image\": \"{{image}}\",\r\n    \"category\": \"{{category}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}products",
					"host": [
						"{{base_url}}products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Product",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"price\",\"300.45\");"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonResponse = pm.response.json();\r",
							"\r",
							"//validating successful response code\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"     pm.response.to.have.status(200);\r",
							" });\r",
							"\r",
							" //Validating json schema\r",
							"const schema=\r",
							"{\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"title\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"price\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"description\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"image\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"category\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"title\",\r",
							"    \"price\",\r",
							"    \"description\",\r",
							"    \"image\",\r",
							"    \"category\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Json schema validation\", function(){\r",
							"pm.expect(jsonResponse).to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"//Checking response is non empty object\r",
							" pm.test(\"Response is an object and not empty\", function(){\r",
							"pm.expect(jsonResponse).to.be.a('object').and.not.be.empty;\r",
							" });\r",
							"\r",
							"//Validating returned product matches with updated data\r",
							"pm.test(\"Expected products validation\", function(){\r",
							"    pm.expect(jsonResponse.id).to.be.eql(21);\r",
							"    pm.expect(jsonResponse.title).to.be.eql(pm.collectionVariables.get(\"title\"));\r",
							"    pm.expect(jsonResponse.description).to.be.eql(pm.collectionVariables.get(\"description\"));\r",
							"    pm.expect(jsonResponse.price).to.be.eql(parseFloat(pm.collectionVariables.get(\"price\")));\r",
							"    pm.expect(jsonResponse.image).to.be.eql(pm.collectionVariables.get(\"image\"));\r",
							"    pm.expect(jsonResponse.category).to.be.eql(pm.collectionVariables.get(\"category\"));\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"{{title}}\",\r\n    \"price\": {{price}},\r\n    \"description\": \"{{description}}\",\r\n    \"image\": \"{{image}}\",\r\n    \"category\": \"{{category}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}products/21",
					"host": [
						"{{base_url}}products"
					],
					"path": [
						"21"
					]
				}
			},
			"response": []
		},
		{
			"name": "Partial update product",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"description\", \"Updated Product description. This is a beautiful black dress with satin cloth fabric\");"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonResponse= pm.response.json();\r",
							"\r",
							"//validating successful response code\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"     pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Validating json schema\r",
							"const schema=\r",
							"{\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"description\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"description\"\r",
							"  ]\r",
							"}\r",
							"pm.test(\"Json schema validation\", function(){\r",
							"pm.expect(jsonResponse).to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"//Checking response is non empty object\r",
							" pm.test(\"Response is an object and not empty\", function(){\r",
							"pm.expect(jsonResponse).to.be.a('object').and.not.be.empty;\r",
							" });\r",
							"\r",
							"//Validate the returned product matches the updated data.\r",
							"pm.test(\"Expected products validation\", function(){\r",
							"    pm.expect(jsonResponse.description).to.be.eql(pm.collectionVariables.get(\"description\"));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \r\n    \"description\": \"{{description}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}products/21",
					"host": [
						"{{base_url}}products"
					],
					"path": [
						"21"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a Product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//validating successful response code\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"     pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}products/21",
					"host": [
						"{{base_url}}products"
					],
					"path": [
						"21"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": ""
		},
		{
			"key": "title",
			"value": ""
		},
		{
			"key": "price",
			"value": ""
		},
		{
			"key": "description",
			"value": ""
		},
		{
			"key": "category",
			"value": ""
		},
		{
			"key": "image",
			"value": ""
		},
		{
			"key": "limit",
			"value": "3"
		},
		{
			"key": "sort",
			"value": "asc"
		}
	]
}